# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t-5kqV3ExSTaMycrm693JCKXEJ-H5rTm
"""

# Description- LSTM long short term memory used to predict closing stock price of SPY.

# Import Libraries
import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#iter 2

import datetime as dt
from pandas_datareader import data as pdr
import yfinance as yfin
yfin.pdr_override()

end=dt.datetime.now()
start= dt.datetime(2016,1,1)
start,end

stocks=['SPY']

# getting Stock Quote
df = pdr.get_data_yahoo(stocks,start,end)
#show data
print (df)

#Get number of rows and columns in dataset
df.shape

#visualise closing price history
plt.figure(figsize=(16,8))
plt.title('Close Price History')
plt.plot(df['Close'])
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price USD', fontsize=18)
plt.show()

#Create a new data frame with only 'Close' Column
data=df.filter(['Close'])
# COnvert data frame to numpy array
dataset= data.values
#Get number of rows to train LSTM
training_data_len= math.ceil(len(dataset)*.8)
training_data_len

# Scale the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

#Create training dataset
#Create scaled training dataset
train_data= scaled_data[0:training_data_len,:]
#Split the data into x_train and y_train datasets
x_train=[]
y_train=[]

for i in range(60,len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i, 0])
  if i<=61:
    print(x_train)
    print(y_train)
    print()

#convert the x_train and y_train to numpy arrays
x_train,y_train= np.array(x_train),np.array(y_train)

#reshape data
x_train= np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))
x_train.shape

#Building the LSTM model
model= Sequential()
model.add(LSTM(50,return_sequences=True, input_shape= (x_train.shape[1],1)))
model.add(LSTM(50,return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#compiling model
model.compile(optimizer='adam',loss='mean_squared_error')

#train the model
model.fit(x_train,y_train, batch_size=1, epochs=1)

#Create the testing data set
#create a new array containing scaled values from index 1227 to 2003
test_data= scaled_data[training_data_len-60: , :]
#Create datasets x_test and y_test
x_test=[]
y_test= dataset[training_data_len:, :]
for i in range(60,len(test_data)):
  x_test.append(test_data[i-60:i,0])

#Convert data to numpy array
x_test=np.array(x_test)

#reshape data from 2d-3d
x_test= np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))

# Get the models predictions
predictions=model.predict(x_test)
predictions= scaler.inverse_transform(predictions)

#Get the RMS error to evaluate model
rmse= np.sqrt(np.mean(predictions-y_test)**2)
rmse

#Plot the data
train=data[:training_data_len]
valid= data[training_data_len:]
valid['Predictions']= predictions
#visualise
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price USD',fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train','Val','Predictions'],loc='lower right')
plt.show()

#Show the actal and predicted prices
valid

#Get the quote 
end=dt.datetime.now()
start= dt.datetime(2016,1,1)
stocks=['SPY']
spy_quote = pdr.get_data_yahoo(stocks,start,end)
#create a new data frame
new_df= spy_quote.filter(['Close'])
#get last 60 days data frme nd covert to araays
last_60_days= new_df[-60:].values
#Scale data to be vals bw 0&1
last_60_days_scaled= scaler.transform(last_60_days)
#create empty list
X_test=[]
#append past 60 days 
X_test.append(last_60_days_scaled)
#covert Xdataset to numpy array
X_test= np.array(X_test)
#reshape
X_test =np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))
#predeiceted scal price
pred_price = model.predict(X_test)
#undo scaling
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)